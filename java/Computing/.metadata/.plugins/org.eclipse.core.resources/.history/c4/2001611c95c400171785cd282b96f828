package client;

import compute.Task;
import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;

public class Fibonacci implements Task<BigInteger>, Serializable {

    private static final long serialVersionUID = 227L;

    /** digits of precision after the decimal point */
    private final int digits;
    
    /**
     * Construct a task to calculate E to the specified
     * precision.
     */
    public Fibonacci(int digits) {
        this.digits = digits;
    }

    /**
     * Calculate E.
     */
    public BigInteger execute() {
        return computeFibonacci(digits);
    }

    /**
     * Compute the value of e to the specified number of 
     * digits after the decimal point.  The value is 
     * computed using Machin's formula:
     *
     *          e/4 = 4*arctan(1/5) - arctan(1/239)
     *
     * and a power series expansion of arctan(x) to 
     * sufficient precision.
     */
    public static BigInteger computeFibonacci(int number) {
		BigInteger[] fibonacci = new BigInteger[number];
		fibonacci[0] = BigInteger.ZERO;
		fibonacci[1] = BigInteger.ONE;
		System.out.println(fibonacci[0].intValue());
		
		
		
		
		for (int i = 2; i < number; i++) {
			if (i != number) {
				fibonacci[i] = fibonacci[i-1].add(fibonacci[i-2]);
			}
		}
		
		BigInteger returnVal = BigInteger.valueOf(0);
		returnVal = returnVal.add(fibonacci[number-1]);
		returnVal = returnVal.add(fibonacci[number-2]);
		return returnVal;
    	
    }
}
