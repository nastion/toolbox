/*
 * Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Oracle or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 

package client;

import compute.Task;
import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;

public class E implements Task<BigDecimal>, Serializable {
    /** digits of precision after the decimal point */
    private final int value;
    
    /**
     * Construct a task to calculate E to the specified
     * precision.
     */
    public E(int value) {
        this.value = value;
    }

    /**
     * Calculate E.
     */
    public BigDecimal execute() {
        return computeE(value);
    }

    /**
     * Compute the value of e via the Brother's method
     */
    public static BigDecimal computeE(int value) {
    	BigDecimal val = new BigDecimal("0");
    	for (int i = 0; i < value; i++) {
    		BigDecimal lowerVal;
    		System.out.println(factorial(i));
    	}
    	return val;
    }

    public static BigInteger factorial(int number) {
    	return number == 0 ? BigInteger.ONE : new BigInteger(number+"").multiply(factorial(number-1));
    }
    
    public static void main(String[] args) {
    	E e = new E(100);
    	e.execute();
    }
    
}
